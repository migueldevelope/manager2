using MongoDB.Bson;
using MongoDB.Driver;
using System;
using System.Collections.Generic;
using System.Text;

namespace Manager.Data.Infrastructure.Migrations
{
  [MigrationVersion(1)]
  public class Migration_add_database_version : IMigration
  {
    public void Up(string _idNextMigration, IMongoDatabase context)
    {
      try
      {
        var script = @"db.Version.insert({ Number: 1, Date: ISODate('" + DateTime.UtcNow.ToString("yyyy-MM-ddTHH\\:mm\\:ss") + @"')});";
        
        var doc = new BsonDocument() { { "eval", script } };
        var command = new BsonDocumentCommand<BsonDocument>(doc);
        var response = context.RunCommand(command);
        

        script = "db.AutoManager.drop();";
        script = script + "db.Certification.drop();";
        script = script + "db.CertificationPerson.drop();";
        script = script + "db.CompanyMandatory.drop();";
        script = script + "db.ConfigurationNotification.drop();";
        script = script + "db.Course.drop();";
        script = script + "db.CourseESocial.drop();";
        script = script + "db.DictionarySphere.drop();";
        script = script + "db.DictionarySystem.drop();";
        script = script + "db.Entity.drop();";
        script = script + "db.Event.drop();";
        script = script + "db.EventESocial.drop();";
        script = script + "db.EventHistoric.drop();";
        script = script + "db.Goals.drop();";
        script = script + "db.GoalsCompany.drop();";
        script = script + "db.GoalsManager.drop();";
        script = script + "db.GoalsPeriod.drop();";
        script = script + "db.GoalsPerson.drop();";
        script = script + "db.GoalsPersonControl.drop();";
        script = script + "db.HistoricPerson.drop();";
        script = script + "db.MandatoryTraining.drop();";
        script = script + "db.Maturity.drop();";
        script = script + "db.MaturityRegister.drop();";
        script = script + "db.MonitoringOld.drop();";
        script = script + "db.PlanOld.drop();";
        script = script + "db.Meritocracy.drop();";
        script = script + "db.MeritocracyActivities.drop();";
        script = script + "db.MeritocracyScore.drop();";
        script = script + "db.OccupationMandatory.drop();";
        script = script + "db.PersonMandatory.drop();";
        script = script + "db.TrainingPlan.drop();";
        script = script + "db.Workflow.drop();";
        script = script + "db.StructPlan.drop();";

        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);

        script = "db.Area.find({}).forEach(function(item){";
        script = script + "	var model = {";
        script = script + "		_id: item._id,";
        script = script + "		Name: item.Name,";
        script = script + "		Company: {";
        script = script + "		   _id: item.Company._id,";
        script = script + "		   Name: item.Company.Name";
        script = script + "		},";
        script = script + "		_idAccount: item._idAccount,";
        script = script + "		Status: item.Status,";
        script = script + "		Order: item.Order,";
        script = script + "		Template: null";
        script = script + "	};";
        script = script + "	if(item.Template != null)";
        script = script + "		model.Template = item.Template._id;";
        script = script + "		";
        script = script + "	db.AreaNew.insert(model);";
        script = script + "});";

        script = script + "db.Area.renameCollection('old_Area');";
        script = script + "db.AreaNew.renameCollection('Area');";

        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);

        script = "db.Axis.find({}).forEach(function(item){";
        script = script + "	var model = {";
        script = script + "		_id: item._id,";
        script = script + "		Name: item.Name,";
        script = script + "		Company: {";
        script = script + "		   _id: item.Company._id,";
        script = script + "		   Name: item.Company.Name";
        script = script + "		},";
        script = script + "		_idAccount: item._idAccount,";
        script = script + "		Status: item.Status,";
        script = script + "		TypeAxis: item.TypeAxis,";
        script = script + "		Template: null";
        script = script + "	};";
        script = script + "	if(item.Template != null)";
        script = script + "		model.Template = item.Template._id;";
        script = script + "		";
        script = script + "	db.AxisNew.insert(model);";
        script = script + "});";


        script = script + "db.Axis.renameCollection('old_Axis');";
        script = script + "db.AxisNew.renameCollection('Axis');";

        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);

        script = "db.Log.find({}).forEach(function(item){";
        script = script + "	var log = {";
        script = script + "	   _id: item._id,";
        script = script + "	   Status: item.Status,";
        script = script + "	   Person: null,";
        script = script + "	   Description: item.Description,";
        script = script + "	   DataLog: item.DataLog,";
        script = script + "	   Local: item.Local,";
        script = script + "	};";
        script = script + "	if(item.Person != null){";
        script = script + "		log.Person = {";
        script = script + "			_id: item.Person._id,";
        script = script + "			Name: item.Person.User.Name";
        script = script + "		}";
        script = script + "	}";
        script = script + "	";
        script = script + "	db.LogNew.insert(log);";
        script = script + "});";

        script = script + "db.Log.renameCollection('old_Log');";
        script = script + "db.LogNew.renameCollection('Log');";

        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);

        script = "db.Company.find({}).forEach(function(item){";
        script = script + "	var model = {";
        script = script + "		_id: item._id,";
        script = script + "		Name: item.Name,";
        script = script + "		_idAccount: item._idAccount,";
        script = script + "		Status: item.Status,";
        script = script + "		Logo: item.Logo,";
        script = script + "		Template: null,";
        script = script + "		Skills: []";
        script = script + "	};";
        script = script + "	if(item.Skills != null){";
        script = script + "		var i = 0;";
        script = script + "		item.Skills.forEach(function(skill){";
        script = script + "		   var view = {";
        script = script + "			   _id: skill._id,";
        script = script + "			  Name: skill.Name,";
        script = script + "			  Concept: skill.Concept,";
        script = script + "			  TypeSkill: skill.TypeSkill";
        script = script + "		   };";
        script = script + "			model.Skills[i] = view;";
        script = script + "			i += 1;";
        script = script + "		});";
        script = script + "	}";
        script = script + "		";
        script = script + "	db.CompanyNew.insert(model);";
        script = script + "});";


        script = script + "db.Company.renameCollection('old_Company');";
        script = script + "db.CompanyNew.renameCollection('Company');";

        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);

        script = "db.Establishment.find({}).forEach(function(item){";
        script = script + "	db.EstablishmentNew.insert({";
        script = script + "		_id: item._id,";
        script = script + "		Name: item.Name,";
        script = script + "		Company: {";
        script = script + "		   _id: item.Company._id,";
        script = script + "		   Name: item.Company.Name";
        script = script + "		},";
        script = script + "		_idAccount: item._idAccount,";
        script = script + "		Status: item.Status";
        script = script + "		});";
        script = script + "});";

        script = script + "db.Establishment.renameCollection('old_Establishment');";
        script = script + "db.EstablishmentNew.renameCollection('Establishment');";

        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);

        script = "db.LogMessages.find({}).forEach(function(item){";
        script = script + "	db.LogMessagesNew.insert({";
        script = script + "		_id: item._id,";
        script = script + "		Subject: item.Subject,";
        script = script + "		Message: item.Message,";
        script = script + "		StatusMessage: item.StatusMessage,";
        script = script + "		Person: {";
        script = script + "		   _id: item.Person._id,";
        script = script + "		   Name: item.Person.User.Name";
        script = script + "		},";
        script = script + "		_idAccount: item._idAccount,";
        script = script + "		Status: item.Status";
        script = script + "		});";
        script = script + "});";

        script = script + "db.LogMessages.renameCollection('old_LogMessages');";
        script = script + "db.LogMessagesNew.renameCollection('LogMessages');";

        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);

        script = "db.ProcessLevelOne.find({}).forEach(function(item){";
        script = script + "	db.ProcessLevelOneNew.insert({";
        script = script + "		_id: item._id,";
        script = script + "		Name: item.Name,";
        script = script + "		Area: {";
        script = script + "		   _id: item.Area._id,";
        script = script + "		   Name: item.Area.Name";
        script = script + "		},";
        script = script + "		_idAccount: item._idAccount,";
        script = script + "		Status: item.Status,";
        script = script + "		Order: item.Order";
        script = script + "	});";
        script = script + "});";

        script = script + "db.ProcessLevelOne.renameCollection('old_ProcessLevelOne');";
        script = script + "db.ProcessLevelOneNew.renameCollection('ProcessLevelOne');";

        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);

        script = "db.ProcessLevelTwo.find({}).forEach(function(item){";
        script = script + "	db.ProcessLevelTwoNew.insert({";
        script = script + "		_id: item._id,";
        script = script + "		Name: item.Name,";
        script = script + "		ProcessLevelOne: {";
        script = script + "		   _id: item.ProcessLevelOne._id,";
        script = script + "		   Name: item.ProcessLevelOne.Name,";
        script = script + "		   Area: {";
        script = script + "			   _id: item.ProcessLevelOne.Area._id,";
        script = script + "			   Name: item.ProcessLevelOne.Area.Name";
        script = script + "		   },";
        script = script + "		   Order: item.ProcessLevelOne.Order";
        script = script + "		},";
        script = script + "		_idAccount: item._idAccount,";
        script = script + "		Status: item.Status,";
        script = script + "		Order: item.Order";
        script = script + "	});";
        script = script + "});";

        script = script + "db.ProcessLevelTwo.renameCollection('old_ProcessLevelTwo');";
        script = script + "db.ProcessLevelTwoNew.renameCollection('ProcessLevelTwo');";

        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);

        script = "db.Sphere.find({}).forEach(function(item){";
        script = script + "	var model = {";
        script = script + "		_id: item._id,";
        script = script + "		Name: item.Name,";
        script = script + "		Company: {";
        script = script + "		   _id: item.Company._id,";
        script = script + "		   Name: item.Company.Name";
        script = script + "		},";
        script = script + "		_idAccount: item._idAccount,";
        script = script + "		Status: item.Status,";
        script = script + "		TypeSphere: item.TypeSphere,";
        script = script + "		Template: null";
        script = script + "	};";
        script = script + "	if(item.Template != null)";
        script = script + "		model.Template = item.Template._id;";
        script = script + "		";
        script = script + "	db.SphereNew.insert(model);";
        script = script + "});";

        script = script + "db.Sphere.renameCollection('old_Sphere');";
        script = script + "db.SphereNew.renameCollection('Sphere');";

        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);

        script = "db.TextDefault.find({}).forEach(function(item){";
        script = script + "	var model = {";
        script = script + "		_id: item._id,";
        script = script + "		Name: item.Name,";
        script = script + "		Company: {";
        script = script + "		   _id: item.Company._id,";
        script = script + "		   Name: item.Company.Name";
        script = script + "		},";
        script = script + "		_idAccount: item._idAccount,";
        script = script + "		Status: item.Status,";
        script = script + "		Content: item.Content,";
        script = script + "		TypeText: item.TypeText,";
        script = script + "		Template: null";
        script = script + "	};";
        script = script + "	";
        script = script + "	if(item.Template != null)";
        script = script + "		model.Template = item.Template._id;";
        script = script + "		";
        script = script + "	db.TextDefaultNew.insert(model);";
        script = script + "});";

        script = script + "db.TextDefault.renameCollection('old_TextDefault');";
        script = script + "db.TextDefaultNew.renameCollection('TextDefault');";

        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);

        script = "db.Skill.find({}).forEach(function(item){";
        script = script + "	var model = {";
        script = script + "		_id: item._id,";
        script = script + "		Name: item.Name,";
        script = script + "		_idAccount: item._idAccount,";
        script = script + "		Status: item.Status,";
        script = script + "		Concept: item.Concept,";
        script = script + "		TypeSkill: item.TypeSkill,";
        script = script + "		Template: null";
        script = script + "	};";
        script = script + "	";
        script = script + "	if(item.Template != null)";
        script = script + "		model.Template = item.Template._id;";
        script = script + "		";
        script = script + "	db.SkillNew.insert(model);";
        script = script + "});";

        script = script + "db.Skill.renameCollection('old_Skill');";
        script = script + "db.SkillNew.renameCollection('Skill');";

        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);

        script = "db.Schooling.find({}).forEach(function(item){";
        script = script + "	var model = {";
        script = script + "		_id: item._id,";
        script = script + "		Name: item.Name,";
        script = script + "		Order: item.Order,";
        script = script + "		_idAccount: item._idAccount,";
        script = script + "		Status: item.Status,";
        script = script + "		Complement: item.Complement,";
        script = script + "		Type: item.Type,";
        script = script + "		Template: null";
        script = script + "	};";
        script = script + "	";
        script = script + "	if(item.Template != null)";
        script = script + "		model.Template = item.Template._id;";
        script = script + "		";
        script = script + "	db.SchoolingNew.insert(model);";
        script = script + "});";

        script = script + "db.Schooling.renameCollection('old_Schooling');";
        script = script + "db.SchoolingNew.renameCollection('Schooling');";


        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);

        script = "db.User.find({}).forEach(function(item){";
        script = script + "	var model = {";
        script = script + "		_id: item._id,";
        script = script + "		_idAccount: item._idAccount,";
        script = script + "		Status: item.Status,";
        script = script + "		Name: item.Name,";
        script = script + "		Document: item.Document,";
        script = script + "		Mail: item.Mail,";
        script = script + "		Phone: item.Phone,";
        script = script + "		Password: item.Password,";
        script = script + "		DateBirth: item.DateBirth,";
        script = script + "		DateAdm: item.DateAdm,";
        script = script + "		Schooling: null,";
        script = script + "		PhotoUrl: item.PhotoUrl,";
        script = script + "		Coins: item.Coins,";
        script = script + "		ChangePassword: item.ChangePassword,";
        script = script + "		ForeignForgotPassword: item.ForeignForgotPassword,";
        script = script + "		PhoneFixed: item.PhoneFixed,";
        script = script + "		DocumentID: item.DocumentID,";
        script = script + "		DocumentCTPF: item.DocumentCTPF,";
        script = script + "		Sex: item.Sex,";
        script = script + "		Nickname: item.Nickname,";
        script = script + "		UserAdmin: item.UserAdmin,";
        script = script + "		UserTermOfServices: item.UserTermOfServices";
        script = script + "	};";
        script = script + "	";
        script = script + "	if(item.Schooling != null){";
        script = script + "		model.Schooling = {";
        script = script + "			_id: item.Schooling._id,";
        script = script + "			Name: item.Schooling.Name,";
        script = script + "			Order: item.Schooling.Order,";
        script = script + "		};";
        script = script + "	}";
        script = script + "		";
        script = script + "	db.UserNew.insert(model);";
        script = script + "});";

        script = script + "db.User.renameCollection('old_User');";
        script = script + "db.UserNew.renameCollection('User');";

        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);

        script = "db.Questions.find({}).forEach(function(item){";
        script = script + "	var model = {";
        script = script + "		_id: item._id,";
        script = script + "		Name: item.Name,";
        script = script + "		Company: {";
        script = script + "		   _id: item.Company._id,";
        script = script + "		   Name: item.Company.Name";
        script = script + "		},";
        script = script + "		_idAccount: item._idAccount,";
        script = script + "		Status: item.Status,";
        script = script + "		Content: item.Content,";
        script = script + "		TypeQuestion: item.TypeQuestion,";
        script = script + "		Order: item.Order,";
        script = script + "		TypeRotine: item.TypeRotine,";
        script = script + "		Template: null";
        script = script + "	};";
        script = script + "	";
        script = script + "	if(item.Template != null)";
        script = script + "		model.Template = item.Template._id;";
        script = script + "		";
        script = script + "	db.QuestionsNew.insert(model);";
        script = script + "});";

        script = script + "db.Questions.renameCollection('old_Questions');";
        script = script + "db.QuestionsNew.renameCollection('Questions');";


        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);

        script = "db.Group.find({}).forEach(function(item){";
        script = script + "	var model = {";
        script = script + "		_id: item._id,";
        script = script + "		_idAccount: item._idAccount,";
        script = script + "		Status: item.Status,";
        script = script + "		Name: item.Name,";
        script = script + "		Company: {";
        script = script + "		   _id: item.Company._id,";
        script = script + "		   Name: item.Company.Name";
        script = script + "		},";
        script = script + "		Axis:  {";
        script = script + "		   _id: item.Axis._id,";
        script = script + "		   Name: item.Axis.Name,";
        script = script + "		   TypeAxis: item.Axis.TypeAxis";
        script = script + "		},";
        script = script + "		Sphere:  {";
        script = script + "		   _id: item.Sphere._id,";
        script = script + "		   Name: item.Sphere.Name,";
        script = script + "		   TypeSphere: item.Sphere.TypeSphere";
        script = script + "		},";
        script = script + "		Line: item.Line,";
        script = script + "		Skills: [],";
        script = script + "		Schooling: [],";
        script = script + "		Scope: [],";
        script = script + "		Template: null";
        script = script + "	};";
        script = script + "	";
        script = script + "	if(item.Template != null)";
        script = script + "		model.Template = item.Template._id;";
        script = script + "	";
        script = script + "	if(item.Skills != null){";
        script = script + "		var i = 0;";
        script = script + "		item.Skills.forEach(function(skill){";
        script = script + "		   var view = {";
        script = script + "			   _id: skill._id,";
        script = script + "			  Name: skill.Name,";
        script = script + "			  Concept: skill.Concept,";
        script = script + "			  TypeSkill: skill.TypeSkill";
        script = script + "		   };";
        script = script + "			model.Skills[i] = view;";
        script = script + "			i += 1;";
        script = script + "		});";
        script = script + "	}";
        script = script + "	";
        script = script + "	if(item.Scope != null){";
        script = script + "		var i = 0;";
        script = script + "		item.Scope.forEach(function(scope){";
        script = script + "		   var view = {";
        script = script + "			   _id: scope._id,";
        script = script + "			  Name: scope.Name,";
        script = script + "			  Order: scope.Order,";
        script = script + "		   };";
        script = script + "			model.Scope[i] = view;";
        script = script + "			i += 1;";
        script = script + "		});";
        script = script + "	}";
        script = script + "	";
        script = script + "	if(item.Schooling != null){";
        script = script + "		var i = 0;";
        script = script + "		item.Schooling.forEach(function(schooling){";
        script = script + "		   var view = {";
        script = script + "			   _id: schooling._id,";
        script = script + "			  Name: schooling.Name,";
        script = script + "			  Complement: schooling.Complement,";
        script = script + "			  Order: schooling.Order,";
        script = script + "			  Type: schooling.Type";
        script = script + "		   };";
        script = script + "			model.Schooling[i] = view;";
        script = script + "			i += 1;";
        script = script + "		});";
        script = script + "	}";
        script = script + "	";
        script = script + "	db.GroupNew.insert(model);";
        script = script + "});";

        script = script + "db.Group.renameCollection('old_Group');";
        script = script + "db.GroupNew.renameCollection('Group');";

        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);

        script = "db.Person.find({}).forEach(function(item){";
        script = script + "	var model = {";
        script = script + "		_id: item._id,";
        script = script + "		_idAccount: item._idAccount,";
        script = script + "		Status: item.Status,";
        script = script + "		StatusUser: item.StatusUser,";
        script = script + "		Company: null,";
        script = script + "		Occupation: null,";
        script = script + "		Manager: item.Manager,";
        script = script + "		DocumentManager: item.DocumentManager,";
        script = script + "		DateLastOccupation: item.DateLastOccupation,";
        script = script + "		Salary: item.Salary,";
        script = script + "		DateLastReadjust: item.DateLastReadjust,";
        script = script + "		DateResignation: item.DateResignation,";
        script = script + "		SalaryScales: item.SalaryScales,";
        script = script + "		TypeJourney: item.TypeJourney,";
        script = script + "		Establishment: null,";
        script = script + "		HolidayReturn: item.HolidayReturn,";
        script = script + "		MotiveAside: item.MotiveAside,";
        script = script + "		TypeUser: item.TypeUser,";
        script = script + "		Registration: item.Registration,";
        script = script + "		User: null";
        script = script + "	};";
        script = script + "	";
        script = script + "	if(item.User != null){";
        script = script + "		model.User =  {";
        script = script + "			_id: item.User._id,";
        script = script + "			Name: item.User.Name,";
        script = script + "			Document: item.User.Document,";
        script = script + "			Mail: item.User.Mail,";
        script = script + "			Phone: item.User.Phone,";
        script = script + "			Password: item.User.Password,";
        script = script + "			DateBirth: item.User.DateBirth,";
        script = script + "			DateAdm: item.User.DateAdm,";
        script = script + "			Schooling: null,";
        script = script + "			PhotoUrl: item.User.PhotoUrl,";
        script = script + "			PhoneFixed: item.User.PhoneFixed,";
        script = script + "			DocumentID: item.User.DocumentID,";
        script = script + "			DocumentCTPF: item.User.DocumentCTPF,";
        script = script + "			Sex: item.User.Sex,";
        script = script + "			Nickname: item.User.Nickname";
        script = script + "		};";
        script = script + "		if(item.User.Schooling  != null)";
        script = script + "		{";
        script = script + "			model.User.Schooling = {";
        script = script + "			  _id: item.User.Schooling._id,";
        script = script + "			  Name: item.User.Schooling.Name,";
        script = script + "			  Order: item.User.Schooling.Order";
        script = script + "			};";
        script = script + "		}";
        script = script + "	}";
        script = script + "	if(item.Company != null)";
        script = script + "	{";
        script = script + "		model.Company = {";
        script = script + "			_id:item.Company._id,";
        script = script + "			Name:item.Company.Name";
        script = script + "		};";
        script = script + "	}";
        script = script + "	";
        script = script + "	if(item.Establishment != null)";
        script = script + "	{";
        script = script + "		model.Establishment = {";
        script = script + "			_id:item.Establishment._id,";
        script = script + "			Name:item.Establishment.Name";
        script = script + "		};";
        script = script + "	}";
        script = script + "   if(item.Occupation != null)";
        script = script + "	{";
        script = script + "		model.Occupation = {";
        script = script + "			_id:  item.Occupation._id,";
        script = script + "			Name:  item.Occupation.Name,";
        script = script + "			_idGroup: null,";
        script = script + "			NameGroup: null,";
        script = script + "			Cbo: null,";
        script = script + "			_idArea: null";
        script = script + "		};";
        script = script + "		if(item.Occupation.Group != null){";
        script = script + "			model.Occupation._idGroup = item.Occupation.Group._id;";
        script = script + "			model.Occupation.NameGroup = item.Occupation.Group.Name;";
        script = script + "		}";
        script = script + "		if(item.Occupation.Cbo  != null){";
        script = script + "			model.Occupation.Cbo = {";
        script = script + "				_id: item.Occupation.Cbo._id,";
        script = script + "				Name: item.Occupation.Cbo.Name,";
        script = script + "				Code: item.Occupation.Cbo.Code";
        script = script + "			};";
        script = script + "		}";
        script = script + "		if(item.Occupation.Process != null){";
        script = script + "			if(item.Occupation.Process[0].ProcessLevelOne != null){";
        script = script + "				if(item.Occupation.Process[0].ProcessLevelOne.Area != null)";
        script = script + "					model.Occupation._idArea = item.Occupation.Process[0].ProcessLevelOne.Area._id;";
        script = script + "			}";
        script = script + "		}";
        script = script + "	}";
        script = script + "	";
        script = script + "	db.PersonNew.insert(model);";
        script = script + "});";

        script = script + "db.Person.renameCollection('old_Person');";
        script = script + "db.PersonNew.renameCollection('Person');";

        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);

        script = "db.Occupation.find({}).forEach(function(item){";
        script = script + "	var model = {";
        script = script + "		_id: item._id,";
        script = script + "		_idAccount: item._idAccount,";
        script = script + "		Status: item.Status,";
        script = script + "		Name: item.Name,";
        script = script + "		Group: null,";
        script = script + "		Line: item.Line,";
        script = script + "		Skills: [],";
        script = script + "		Schooling: [],";
        script = script + "		Activities: [],";
        script = script + "		Template: null,";
        script = script + "		Cbo: null,";
        script = script + "		SpecificRequirements: item.SpecificRequirements,";
        script = script + "		Process: [],";
        script = script + "		SalaryScales: item.SalaryScales,";
        script = script + "	};";
        script = script + "	";
        script = script + "	if(item.Group  != null)";
        script = script + "	{";
        script = script + "		model.Group = {";
        script = script + "			_id: item.Group._id,";
        script = script + "			Name: item.Group.Name,";
        script = script + "			Line: item.Group.Line,";
        script = script + "			Company: null,";
        script = script + "			Sphere: null,";
        script = script + "			Axis: null";
        script = script + "		};";
        script = script + "		if(item.Group.Company != null){";
        script = script + "			model.Group.Company = {";
        script = script + "				_id: item.Group.Company._id,";
        script = script + "				Name: item.Group.Company.Name";
        script = script + "			};";
        script = script + "		}";
        script = script + "		if(item.Group.Axis != null){";
        script = script + "			model.Group.Axis = {";
        script = script + "				_id: item.Group.Axis._id,";
        script = script + "				Name: item.Group.Axis.Name,";
        script = script + "				TypeAxis: item.Group.Axis.TypeAxis";
        script = script + "			};";
        script = script + "		}";
        script = script + "		if(item.Group.Sphere  != null){";
        script = script + "			model.Group.Sphere = {";
        script = script + "				_id: item.Group.Sphere._id,";
        script = script + "				Name: item.Group.Sphere.Name,";
        script = script + "				TypeSphere: item.Group.Sphere.TypeSphere";
        script = script + "			};";
        script = script + "		}";
        script = script + "	}";
        script = script + "		";
        script = script + "	";
        script = script + "	if(item.Cbo != null)";
        script = script + "	{";
        script = script + "		model.Cbo = {";
        script = script + "			_id:item.Cbo._id,";
        script = script + "			Name:item.Cbo.Name,";
        script = script + "			Code: item.Cbo.Code";
        script = script + "		};";
        script = script + "	}";
        script = script + "	";
        script = script + "	if(item.Template != null)";
        script = script + "		model.Template = item.Template._id;";
        script = script + "		";
        script = script + "	if(item.Skills != null){";
        script = script + "		var i = 0;";
        script = script + "		item.Skills.forEach(function(skill){";
        script = script + "		   if(skill!= null){";
        script = script + "			   var view = {";
        script = script + "				   _id: skill._id,";
        script = script + "				  Name: skill.Name,";
        script = script + "				  Concept: skill.Concept,";
        script = script + "				  TypeSkill: skill.TypeSkill";
        script = script + "			   };";
        script = script + "				model.Skills[i] = view;";
        script = script + "				i += 1;";
        script = script + "		   }";
        script = script + "		});";
        script = script + "	}";
        script = script + "	";
        script = script + "	if(item.Schooling != null){";
        script = script + "		var i = 0;";
        script = script + "		item.Schooling.forEach(function(schooling){";
        script = script + "		   var view = {";
        script = script + "			   _id: schooling._id,";
        script = script + "			  Name: schooling.Name,";
        script = script + "			  Complement: schooling.Complement,";
        script = script + "			  Order: schooling.Order,";
        script = script + "			  Type: schooling.Type";
        script = script + "		   };";
        script = script + "			model.Schooling[i] = view;";
        script = script + "			i += 1;";
        script = script + "		});";
        script = script + "	}";
        script = script + "	";
        script = script + "	if(item.Activities != null){";
        script = script + "		var i = 0;";
        script = script + "		item.Activities.forEach(function(activities){";
        script = script + "		   var view = {";
        script = script + "			   _id: activities._id,";
        script = script + "			  Name: activities.Name,";
        script = script + "			  Order: activities.Order";
        script = script + "		   };";
        script = script + "			model.Activities[i] = view;";
        script = script + "			i += 1;";
        script = script + "		});";
        script = script + "	}";
        script = script + "	";
        script = script + "	if(item.Process != null){";
        script = script + "		var i = 0;";
        script = script + "		item.Process.forEach(function(process){";
        script = script + "		   var view = {";
        script = script + "			   _id: process._id,";
        script = script + "			  Name: process.Name,";
        script = script + "			  Order: process.Order,";
        script = script + "			  ProcessLevelOne: []";
        script = script + "			};";
        script = script + "			";
        script = script + "			if(process.ProcessLevelOne != null){";
        script = script + "				view.ProcessLevelOne = {";
        script = script + "				  _id: process.ProcessLevelOne._id,";
        script = script + "				  Name: process.ProcessLevelOne.Name,";
        script = script + "				  Order: process.ProcessLevelOne.Order,";
        script = script + "				  Area: {";
        script = script + "					  _id:  process.ProcessLevelOne.Area._id,";
        script = script + "					  Name:  process.ProcessLevelOne.Area.Name";
        script = script + "				  }";
        script = script + "				}";
        script = script + "			}";
        script = script + "			model.Process[i] = view;";
        script = script + "			i += 1;";
        script = script + "		});";
        script = script + "	}";
        script = script + "	";
        script = script + "	db.OccupationNew.insert(model);";
        script = script + "});";

        script = script + "db.Occupation.renameCollection('old_Occupation');";
        script = script + "db.OccupationNew.renameCollection('Occupation');";

        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);

        script = "db.SalaryScale.find({}).forEach(function(item){";
        script = script + "	var model = {";
        script = script + "		_id: item._id,";
        script = script + "		_idAccount: item._idAccount,";
        script = script + "		Status: item.Status,";
        script = script + "		Grades: item.Grades,";
        script = script + "		Company: null";
        script = script + "	};";
        script = script + "	";
        script = script + "	if(item.Company != null)";
        script = script + "	{";
        script = script + "		model.Company = {";
        script = script + "			_id: item.Company._id,";
        script = script + "			Name: item.Company.Name,";
        script = script + "		}";
        script = script + "	}";

        script = script + "	db.SalaryScaleNew.insert(model);";
        script = script + "});";

        script = script + "db.SalaryScale.renameCollection('old_SalaryScale');";
        script = script + "db.SalaryScaleNew.renameCollection('SalaryScale');";

        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);

        script = "db.Plan.find({}).forEach(function(item){";
        script = script + "	var model = {";
        script = script + "		_id: item._id,";
        script = script + "		_idAccount: item._idAccount,";
        script = script + "		Status: item.Status,";
        script = script + "		Name: item.Name,";
        script = script + "		Description: item.Description,";
        script = script + "		Deadline: item.Deadline,";
        script = script + "		Skills: [],";
        script = script + "		DateInclude: item.DateInclude,";
        script = script + "		TypePlan: item.TypePlan,";
        script = script + "		SourcePlan: item.SourcePlan,";
        script = script + "		TypeAction: item.TypeAction,";
        script = script + "		StatusPlan: item.StatusPlan,";
        script = script + "		TextEnd: item.TextEnd,";
        script = script + "		TextEndManager: item.TextEndManager,";
        script = script + "		DateEnd: item.DateEnd,";
        script = script + "		Evaluation: item.Evaluation,";
        script = script + "		Result: item.Result,";
        script = script + "		StatusPlanApproved: item.StatusPlanApproved,";
        script = script + "		Attachments: item.Attachments,";
        script = script + "		NewAction: item.NewAction,";
        script = script + "		StructPlans: [],";
        script = script + "		_idMonitoring: item._idMonitoring,";
        script = script + "		_idItem: item._idItem,";
        script = script + "		Person: null";
        script = script + "	};";
        script = script + "	";
        script = script + "	 if(item.Skills != null){";
        script = script + "		var i = 0;";
        script = script + "		item.Skills.forEach(function(skill){";
        script = script + "		   var view = {";
        script = script + "			   _id: skill._id,";
        script = script + "			  Name: skill.Name,";
        script = script + "			  Concept: skill.Concept,";
        script = script + "			  TypeSkill: skill.TypeSkill";
        script = script + "		   };";
        script = script + "			model.Skills[i] = view;";
        script = script + "			i += 1;";
        script = script + "		});";
        script = script + "	}";
        script = script + "	";
        script = script + "	if(item.Person != null){";
        script = script + "		item.Person =  {";
        script = script + "			_id: item.Person._id,";
        script = script + "			Name: item.Person.User.Name,";
        script = script + "			_idManager: null,";
        script = script + "			Manager: null";
        script = script + "		};";
        script = script + "		if(item.Person.Manager != null)";
        script = script + "		{";
        script = script + "			model.Person._idManager = item.Person.Manager._id;";
        script = script + "			model.Person.Manager= item.Person.Manager.Name;";
        script = script + "		}";
        script = script + "	}";
        script = script + "	";
        script = script + "	if(item.StructPlans!= null){";
        script = script + "		var i = 0;";
        script = script + "		item.StructPlans.forEach(function(struct){";
        script = script + "			var view = {";
        script = script + "				_id: struct._id,";
        script = script + "				Course: null,";
        script = script + "				TypeAction: struct.TypeAction,";
        script = script + "				TypeResponsible: struct.TypeResponsible,";
        script = script + "				PlanActivity: null";
        script = script + "			};";
        script = script + "			if(struct.Course != null)";
        script = script + "			{";
        script = script + "				struct.Course = {";
        script = script + "					_id: struct.Course._id,";
        script = script + "					Name: struct.Course.Name";
        script = script + "				};";
        script = script + "			}";
        script = script + "			if(struct.PlanActivity != null)";
        script = script + "			{";
        script = script + "				struct.PlanActivity = {";
        script = script + "					_id: struct.PlanActivity._id,";
        script = script + "					Name: struct.PlanActivity.Name";
        script = script + "				};";
        script = script + "			}";
        script = script + "			";
        script = script + "			model.StructPlans[i] = view;";
        script = script + "			i += 1;";
        script = script + "		});";
        script = script + "	}";
        script = script + "	";
        script = script + "	db.PlanNew.insert(model);";
        script = script + "});";

        script = script + "db.Plan.update({SourcePlan: null}, {$set:{ Evaluation: 0, SourcePlan: 0, TypeAction: 0, TypePlan:0,StatusPlan:0,StatusPlanApproved:0,NewAction:0}}, {multi:true });";
        script = script + "db.Plan.update({NewAction: null}, {$set:{ NewAction:0 }}, {multi:true });";

        script = script + "db.Plan.renameCollection('old_Plan');";
        script = script + "db.PlanNew.renameCollection('Plan');";

        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);


        script = "db.Checkpoint.find({}).forEach(function(item){";
        script = script + "	var model = {";
        script = script + "		_id: item._id,";
        script = script + "		_idAccount: item._idAccount,";
        script = script + "		Status: item.Status,";
        script = script + "		DateBegin: item.DateBegin,";
        script = script + "		DateEnd: item.DateEnd,";
        script = script + "		TextDefault: item.TextDefault,";
        script = script + "		Comments: item.Comments,";
        script = script + "		StatusCheckpoint: item.StatusCheckpoint,";
        script = script + "		DataAccess: item.DataAccess,";
        script = script + "		TypeCheckpoint: item.TypeCheckpoint,";
        script = script + "		Person: null,";
        script = script + "		Occupation: null,";
        script = script + "		Questions: []";
        script = script + "	};";
        script = script + "	";
        script = script + "	if(item.Person != null)";
        script = script + "	{";
        script = script + "		model.Person = {";
        script = script + "			_id: item.Person._id,";
        script = script + "			Name: item.Person.User.Name,";
        script = script + "			TypeJourney: item.Person.TypeJourney,";
        script = script + "			Occupation: null,";
        script = script + "			_idManager: null,";
        script = script + "			Manager: null";
        script = script + "		};";
        script = script + "		if(item.Person.Occupation != null)";
        script = script + "			model.Person.Occupation = item.Person.Occupation.Name;";
        script = script + "			";
        script = script + "		if(item.Person.Manager  != null)";
        script = script + "		{";
        script = script + "			model.Person._idManager = item.Person.Manager._id;";
        script = script + "			model.Person.Manager = item.Person.Manager.Name;";
        script = script + "		}";
        script = script + "	}";
        script = script + "	";
        script = script + "	if(item.Occupation != null){";
        script = script + "		 model.Occupation = {";
        script = script + "			 _id: item.Occupation._id,";
        script = script + "			 Name: item.Occupation.Name,";
        script = script + "			_idGroup: item.Occupation.Group._id,";
        script = script + "			NameGroup: item.Occupation.Group.Name,";
        script = script + "			Cbo: null,";
        script = script + "			_idArea: null,";
        script = script + "		};";
        script = script + "		if(item.Occupation.Cbo != null){";
        script = script + "			model.Cbo = {";
        script = script + "				_id: item.Occupation.Cbo._id,";
        script = script + "				Name: item.Occupation.Cbo.Name,";
        script = script + "				Code: item.Occupation.Cbo.Code";
        script = script + "			};";
        script = script + "		}";
        script = script + "		if(item.Occupation.Process != null){";
        script = script + "			if(item.Occupation.Process[0].ProcessLevelOne != null){";
        script = script + "				if(item.Occupation.Process[0].ProcessLevelOne.Area != null)";
        script = script + "					model.Occupation._idArea = item.Occupation.Process[0].ProcessLevelOne.Area._id;";
        script = script + "			}";
        script = script + "		}";
        script = script + "	}";
        script = script + "	";
        script = script + "	if(item.Questions != null){";
        script = script + "		var i = 0;";
        script = script + "		item.Questions.forEach(function(questions){";
        script = script + "			if(questions != null){";
        script = script + "				var view = {";
        script = script + "				   _id: questions._id,";
        script = script + "				  Mark: questions.Mark,";
        script = script + "				  Question: null,";
        script = script + "				  Itens: []";
        script = script + "			   };";
        script = script + "			   if(questions.Question != null){";
        script = script + "					view.Question = {";
        script = script + "						_id: questions.Question._id,";
        script = script + "						Name: questions.Question.Name,";
        script = script + "						Content: questions.Question.Content,";
        script = script + "						TypeQuestion: questions.Question.TypeQuestion,";
        script = script + "						Order: questions.Question.Order,";
        script = script + "						TypeRotine: questions.Question.TypeRotine";
        script = script + "					};";
        script = script + "			   }";
        script = script + "			";
        script = script + "			   if(questions.Itens != null){";
        script = script + "					var x = 0;";
        script = script + "					questions.Itens.forEach(function(itq){";
        script = script + "						var viewItq = {";
        script = script + "						   _id: itq._id,";
        script = script + "						  Mark: itq.Mark,";
        script = script + "						  Question: null";
        script = script + "					   };";
        script = script + "					   if(itq.Question != null){";
        script = script + "							viewItq.Question = {";
        script = script + "								_id: itq.Question._id,";
        script = script + "								Name: itq.Question.Name,";
        script = script + "								Content: itq.Question.Content,";
        script = script + "								TypeQuestion: itq.Question.TypeQuestion,";
        script = script + "								Order: itq.Question.Order,";
        script = script + "								TypeRotine: itq.Question.TypeRotine";
        script = script + "							};";
        script = script + "					   }";
        script = script + "					   view.Itens[x] = viewItq;";
        script = script + "					});";
        script = script + "			   }";
        script = script + "			";
        script = script + "				model.Questions[i] = view;";
        script = script + "				i += 1;";
        script = script + "			}";
        script = script + "		";
        script = script + "		});";
        script = script + "		";
        script = script + "	}";
        script = script + "	";
        script = script + "	db.CheckpointNew.insert(model);";
        script = script + "});";


        script = script + "db.Checkpoint.renameCollection('old_Checkpoint');";
        script = script + "db.CheckpointNew.renameCollection('Checkpoint');";

        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);

        script = "db.OnBoarding.find({}).forEach(function(item){";
        script = script + "	var model = {";
        script = script + "		_id: item._id,";
        script = script + "		_idAccount: item._idAccount,";
        script = script + "		Status: item.Status,";
        script = script + "		Person: null,";
        script = script + "		DateBeginPerson: item.DateBeginPerson,";
        script = script + "		DateBeginManager: item.DateBeginManager,";
        script = script + "		DateBeginEnd: item.DateBeginEnd,";
        script = script + "		DateEndPerson: item.DateEndPerson,";
        script = script + "		DateEndManager: item.DateEndManager,";
        script = script + "		DateEndEnd: item.DateEndEnd,";
        script = script + "		CommentsPerson: item.CommentsPerson,";
        script = script + "		CommentsManager: item.CommentsManager,";
        script = script + "		CommentsEnd: item.CommentsEnd,";
        script = script + "		SkillsCompany: [],";
        script = script + "		SkillsGroup: [],";
        script = script + "		SkillsOccupation: [],";
        script = script + "		Scopes: [],";
        script = script + "		Schoolings: [],";
        script = script + "		Activities: [],";
        script = script + "		StatusOnBoarding: item.StatusOnBoarding";
        script = script + "	};";
        script = script + "	";
        script = script + "	if(item.Person != null)";
        script = script + "	{";
        script = script + "		model.Person = {";
        script = script + "			_id: item.Person._id,";
        script = script + "			Name: null,";
        script = script + "			TypeJourney: item.Person.TypeJourney,";
        script = script + "			Occupation: null,";
        script = script + "			_idManager: null,";
        script = script + "			Manager: null";
        script = script + "		};";
        script = script + "		if(item.Person.User != null)";
        script = script + "			model.Person.Name = item.Person.User.Name;";
        script = script + "			";
        script = script + "		if(item.Person.Occupation != null)";
        script = script + "			model.Person.Occupation = item.Person.Occupation.Name;";
        script = script + "			";
        script = script + "		if(item.Person.Manager  != null)";
        script = script + "		{";
        script = script + "			model.Person._idManager = item.Person.Manager._id;";
        script = script + "			model.Person.Manager = item.Person.Manager.Name;";
        script = script + "		}";
        script = script + "	}";
        script = script + "	";
        script = script + "	if(item.SkillsCompany != null){";
        script = script + "		var i = 0;";
        script = script + "		item.SkillsCompany.forEach(function(skill){";
        script = script + "		   if(skill!= null){";
        script = script + "			   var view = {";
        script = script + "				_id: skill._id,";
        script = script + "				CommentsManager: skill.CommentsManager,";
        script = script + "				CommentsPerson: skill.CommentsPerson,";
        script = script + "				Comments: [],";
        script = script + "				StatusViewManager: skill.StatusViewManager,";
        script = script + "				StatusViewPerson: skill.StatusViewPerson,";
        script = script + "				Skill: {";
        script = script + "				  _id: skill.Skill._id,";
        script = script + "				  Name: skill.Skill.Name,";
        script = script + "				  Concept: skill.Skill.Concept,";
        script = script + "				  TypeSkill: skill.Skill.TypeSkill";
        script = script + "				}";
        script = script + "			};";
        script = script + "			if(skill.Comments != null){";
        script = script + "				var x = 0;";
        script = script + "				skill.Comments.forEach(function(comment){";
        script = script + "				";
        script = script + "				   var viewIt = {";
        script = script + "						Comments: comment.Comments,";
        script = script + "						Date: comment.Date,";
        script = script + "						StatusView: comment.StatusView,";
        script = script + "						UserComment: comment.UserComment,";
        script = script + "				   };";
        script = script + "				   view.Comments[x] = viewIt;";
        script = script + "				});";
        script = script + "			}";
        script = script + "			model.SkillsCompany[i] = view;";
        script = script + "			i += 1;";
        script = script + "		   }";
        script = script + "		});";
        script = script + "	}";
        script = script + "	";
        script = script + "	if(item.SkillsGroup != null){";
        script = script + "		var i = 0;";
        script = script + "		item.SkillsGroup.forEach(function(skill){";
        script = script + "		   if(skill!= null){";
        script = script + "			   var view = {";
        script = script + "				_id: skill._id,";
        script = script + "				CommentsManager: skill.CommentsManager,";
        script = script + "				CommentsPerson: skill.CommentsPerson,";
        script = script + "				Comments: [],";
        script = script + "				StatusViewManager: skill.StatusViewManager,";
        script = script + "				StatusViewPerson: skill.StatusViewPerson,";
        script = script + "				Skill: {";
        script = script + "				  _id: skill.Skill._id,";
        script = script + "				  Name: skill.Skill.Name,";
        script = script + "				  Concept: skill.Skill.Concept,";
        script = script + "				  TypeSkill: skill.Skill.TypeSkill";
        script = script + "				}";
        script = script + "			};";
        script = script + "			if(skill.Comments != null){";
        script = script + "				var x = 0;";
        script = script + "				skill.Comments.forEach(function(comment){";
        script = script + "				";
        script = script + "				   var viewIt = {";
        script = script + "						Comments: comment.Comments,";
        script = script + "						Date: comment.Date,";
        script = script + "						StatusView: comment.StatusView,";
        script = script + "						UserComment: comment.UserComment,";
        script = script + "				   };";
        script = script + "				   view.Comments[x] = viewIt;";
        script = script + "				});";
        script = script + "			}";
        script = script + "			model.SkillsGroup[i] = view;";
        script = script + "			i += 1;";
        script = script + "		   }";
        script = script + "		});";
        script = script + "	}";
        script = script + "	";
        script = script + "	if(item.SkillsOccupation != null){";
        script = script + "		var i = 0;";
        script = script + "		item.SkillsOccupation.forEach(function(skill){";
        script = script + "		   if(skill!= null){";
        script = script + "			   var view = {";
        script = script + "				_id: skill._id,";
        script = script + "				CommentsManager: skill.CommentsManager,";
        script = script + "				CommentsPerson: skill.CommentsPerson,";
        script = script + "				Comments: [],";
        script = script + "				StatusViewManager: skill.StatusViewManager,";
        script = script + "				StatusViewPerson: skill.StatusViewPerson,";
        script = script + "				Skill: {";
        script = script + "				  _id: skill.Skill._id,";
        script = script + "				  Name: skill.Skill.Name,";
        script = script + "				  Concept: skill.Skill.Concept,";
        script = script + "				  TypeSkill: skill.Skill.TypeSkill";
        script = script + "				}";
        script = script + "			};";
        script = script + "			if(skill.Comments != null){";
        script = script + "				var x = 0;";
        script = script + "				skill.Comments.forEach(function(comment){";
        script = script + "				";
        script = script + "				   var viewIt = {";
        script = script + "						Comments: comment.Comments,";
        script = script + "						Date: comment.Date,";
        script = script + "						StatusView: comment.StatusView,";
        script = script + "						UserComment: comment.UserComment,";
        script = script + "				   };";
        script = script + "				   view.Comments[x] = viewIt;";
        script = script + "				});";
        script = script + "			}";
        script = script + "			model.SkillsOccupation[i] = view;";
        script = script + "			i += 1;";
        script = script + "		   }";
        script = script + "		});";
        script = script + "	}";
        script = script + "	";
        script = script + "	if(item.Scopes != null){";
        script = script + "		var i = 0;";
        script = script + "		item.Scopes.forEach(function(skill){";
        script = script + "		   if(skill!= null){";
        script = script + "			   var view = {";
        script = script + "				_id: skill._id,";
        script = script + "				CommentsManager: skill.CommentsManager,";
        script = script + "				CommentsPerson: skill.CommentsPerson,";
        script = script + "				Comments: [],";
        script = script + "				StatusViewManager: skill.StatusViewManager,";
        script = script + "				StatusViewPerson: skill.StatusViewPerson,";
        script = script + "				Scope: {";
        script = script + "				  _id: skill.Scope._id,";
        script = script + "				  Name: skill.Scope.Name,";
        script = script + "				  Order: skill.Scope.Order";
        script = script + "				}";
        script = script + "			};";
        script = script + "			if(skill.Comments != null){";
        script = script + "				var x = 0;";
        script = script + "				skill.Comments.forEach(function(comment){";
        script = script + "				";
        script = script + "				   var viewIt = {";
        script = script + "						Comments: comment.Comments,";
        script = script + "						Date: comment.Date,";
        script = script + "						StatusView: comment.StatusView,";
        script = script + "						UserComment: comment.UserComment,";
        script = script + "				   };";
        script = script + "				   view.Comments[x] = viewIt;";
        script = script + "				});";
        script = script + "			}";
        script = script + "			model.Scopes[i] = view;";
        script = script + "			i += 1;";
        script = script + "		   }";
        script = script + "		});";
        script = script + "	}";
        script = script + "	";
        script = script + "	 if(item.Schoolings != null){";
        script = script + "		var i = 0;";
        script = script + "		item.Schoolings.forEach(function(skill){";
        script = script + "		   if(skill!= null){";
        script = script + "			   var view = {";
        script = script + "				_id: skill._id,";
        script = script + "				CommentsManager: skill.CommentsManager,";
        script = script + "				CommentsPerson: skill.CommentsPerson,";
        script = script + "				Comments: [],";
        script = script + "				StatusViewManager: skill.StatusViewManager,";
        script = script + "				StatusViewPerson: skill.StatusViewPerson,";
        script = script + "				Schooling: {";
        script = script + "				  _id: skill.Schooling._id,";
        script = script + "				  Name: skill.Schooling.Name,";
        script = script + "				  Order: skill.Schooling.Order,";
        script = script + "				  Complement: skill.Schooling.Complement,";
        script = script + "				  Type: skill.Schooling.Type";
        script = script + "				}";
        script = script + "			};";
        script = script + "			if(skill.Comments != null){";
        script = script + "				var x = 0;";
        script = script + "				skill.Comments.forEach(function(comment){";
        script = script + "				";
        script = script + "				   var viewIt = {";
        script = script + "						Comments: comment.Comments,";
        script = script + "						Date: comment.Date,";
        script = script + "						StatusView: comment.StatusView,";
        script = script + "						UserComment: comment.UserComment,";
        script = script + "				   };";
        script = script + "				   view.Comments[x] = viewIt;";
        script = script + "				});";
        script = script + "			}";
        script = script + "			model.Schoolings[i] = view;";
        script = script + "			i += 1;";
        script = script + "		   }";
        script = script + "		});";
        script = script + "	}";
        script = script + "	";
        script = script + "	 if(item.Activities != null){";
        script = script + "		var i = 0;";
        script = script + "		item.Activities.forEach(function(skill){";
        script = script + "		   if(skill!= null){";
        script = script + "			   var view = {";
        script = script + "				_id: skill._id,";
        script = script + "				CommentsManager: skill.CommentsManager,";
        script = script + "				CommentsPerson: skill.CommentsPerson,";
        script = script + "				Comments: [],";
        script = script + "				StatusViewManager: skill.StatusViewManager,";
        script = script + "				StatusViewPerson: skill.StatusViewPerson,";
        script = script + "				Activitie: {";
        script = script + "				  _id: skill.Activitie._id,";
        script = script + "				  Name: skill.Activitie.Name,";
        script = script + "				  Order: skill.Activitie.Order";
        script = script + "				}";
        script = script + "			};";
        script = script + "			if(skill.Comments != null){";
        script = script + "				var x = 0;";
        script = script + "				skill.Comments.forEach(function(comment){";
        script = script + "				";
        script = script + "				   var viewIt = {";
        script = script + "						Comments: comment.Comments,";
        script = script + "						Date: comment.Date,";
        script = script + "						StatusView: comment.StatusView,";
        script = script + "						UserComment: comment.UserComment,";
        script = script + "				   };";
        script = script + "				   view.Comments[x] = viewIt;";
        script = script + "				});";
        script = script + "			}";
        script = script + "			model.Activities[i] = view;";
        script = script + "			i += 1;";
        script = script + "		   }";
        script = script + "		});";
        script = script + "	}";

        script = script + "	db.OnBoardingNew.insert(model);";
        script = script + "});";

        script = script + "db.OnBoarding.renameCollection('old_OnBoarding');";
        script = script + "db.OnBoardingNew.renameCollection('OnBoarding');";

        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);

        script = "db.Monitoring.find({}).forEach(function(item){";
        script = script + "	var model = {";
        script = script + "		_id: item._id,";
        script = script + "		_idAccount: item._idAccount,";
        script = script + "		Status: item.Status,";
        script = script + "		Person: null,";
        script = script + "		DateBeginPerson: item.DateBeginPerson,";
        script = script + "		DateBeginManager: item.DateBeginManager,";
        script = script + "		DateBeginEnd: item.DateBeginEnd,";
        script = script + "		DateEndPerson: item.DateEndPerson,";
        script = script + "		DateEndManager: item.DateEndManager,";
        script = script + "		DateEndEnd: item.DateEndEnd,";
        script = script + "		CommentsPerson: item.CommentsPerson,";
        script = script + "		CommentsManager: item.CommentsManager,";
        script = script + "		CommentsEnd: item.CommentsEnd,";
        script = script + "		SkillsCompany: [],";
        script = script + "		Schoolings: [],";
        script = script + "		Activities: [],";
        script = script + "		StatusMonitoring: item.StatusMonitoring";
        script = script + "	};";

        script = script + "	if(item.Person != null)";
        script = script + "	{";
        script = script + "	   model.Person = {";
        script = script + "			_id: item.Person._id,";
        script = script + "			Name: item.Person.User.Name,";
        script = script + "			TypeJourney: item.Person.TypeJourney,";
        script = script + "			Occupation: null,";
        script = script + "			_idManager: null,";
        script = script + "			Manager: null";
        script = script + "		};";
        script = script + "		if(item.Person.Occupation != null)";
        script = script + "			model.Person.Occupation = item.Person.Occupation.Name;";
        script = script + "			";
        script = script + "		if(item.Person.Manager  != null)";
        script = script + "		{";
        script = script + "			model.Person._idManager = item.Person.Manager._id;";
        script = script + "			model.Person.Manager = item.Person.Manager.Name;";
        script = script + "		}";
        script = script + "	}";
        script = script + "	";
        script = script + "	if(item.SkillsCompany != null){";
        script = script + "		var i = 0;";
        script = script + "		item.SkillsCompany.forEach(function(skill){";
        script = script + "		   if(skill!= null){";
        script = script + "			   var view = {";
        script = script + "				_id: skill._id,";
        script = script + "				CommentsManager: skill.CommentsManager,";
        script = script + "				CommentsPerson: skill.CommentsPerson,";
        script = script + "				Comments: [],";
        script = script + "				Plans: [],";
        script = script + "				StatusViewManager: skill.StatusViewManager,";
        script = script + "				StatusViewPerson: skill.StatusViewPerson,";
        script = script + "				Praise: skill.Praise,";
        script = script + "				Skill: {";
        script = script + "				  _id: skill.Skill._id,";
        script = script + "				  Name: skill.Skill.Name,";
        script = script + "				  Concept: skill.Skill.Concept,";
        script = script + "				  TypeSkill: skill.Skill.TypeSkill";
        script = script + "				}";
        script = script + "			};";
        script = script + "			if(skill.Comments != null){";
        script = script + "				var x = 0;";
        script = script + "				skill.Comments.forEach(function(comment){";
        script = script + "				";
        script = script + "				   var viewIt = {";
        script = script + "						Comments: comment.Comments,";
        script = script + "						Date: comment.Date,";
        script = script + "						StatusView: comment.StatusView,";
        script = script + "						UserComment: comment.UserComment";
        script = script + "				   };";
        script = script + "				   view.Comments[x] = viewIt;";
        script = script + "				});";
        script = script + "			}";
        script = script + "			if(skill.Plans != null){";
        script = script + "				var x = 0;";
        script = script + "				skill.Plans.forEach(function(plan){";
        script = script + "				";
        script = script + "				   var viewPlan = {";
        script = script + "						_id: plan._id,";
        script = script + "						Name: plan.Name,";
        script = script + "						Description: plan.Description,";
        script = script + "						Deadline: plan.Deadline,";
        script = script + "						Skills: [],";
        script = script + "						TypePlan: plan.TypePlan,";
        script = script + "						SourcePlan: plan.SourcePlan,";
        script = script + "						StatusPlan: plan.StatusPlan,";
        script = script + "						StatusPlanApproved: plan.StatusPlanApproved,";
        script = script + "						TypeAction: plan.TypeAction,";
        script = script + "						Attachments: plan.Attachments,";
        script = script + "						NewAction: plan.NewAction,";
        script = script + "						TextEnd: plan.TextEnd,";
        script = script + "						TextEndManager: plan.TextEndManager,";
        script = script + "						Evaluation: plan.Evaluation";
        script = script + "				   };";
        script = script + "				   if(plan.Skills != null){";
        script = script + "					   var z = 0;";
        script = script + "					   plan.Skills.forEach(function(planSkill){";
        script = script + "						   var viewPlanSkill = {";
        script = script + "							  _id: planSkill._id,";
        script = script + "							  Name: planSkill.Name,";
        script = script + "							  Concept: planSkill.Concept,";
        script = script + "							  TypeSkill: planSkill.TypeSkill";
        script = script + "						   };";
        script = script + "						   viewPlan.Skills[z] = viewPlanSkill;";
        script = script + "					   });";
        script = script + "				   }";
        script = script + "				   view.Plans[x] = viewPlan;";
        script = script + "				});";
        script = script + "			}";
        script = script + "			";
        script = script + "			";
        script = script + "			model.SkillsCompany[i] = view;";
        script = script + "			i += 1;";
        script = script + "		   }";
        script = script + "		});";
        script = script + "	}";
        script = script + "	";
        script = script + "	if(item.Schoolings != null){";
        script = script + "		var i = 0;";
        script = script + "		item.Schoolings.forEach(function(skill){";
        script = script + "		   if(skill!= null){";
        script = script + "			   var view = {";
        script = script + "				_id: skill._id,";
        script = script + "				CommentsManager: skill.CommentsManager,";
        script = script + "				CommentsPerson: skill.CommentsPerson,";
        script = script + "				Comments: [],";
        script = script + "				Plans: [],";
        script = script + "				StatusViewManager: skill.StatusViewManager,";
        script = script + "				StatusViewPerson: skill.StatusViewPerson,";
        script = script + "				Praise: skill.Praise,";
        script = script + "				Schooling: {";
        script = script + "				  _id: skill.Schooling._id,";
        script = script + "				  Name: skill.Schooling.Name,";
        script = script + "				  Order: skill.Schooling.Order,";
        script = script + "				  Complement: skill.Schooling.Complement,";
        script = script + "				  Type: skill.Schooling.Type";
        script = script + "				}";
        script = script + "			};";
        script = script + "			if(skill.Comments != null){";
        script = script + "				var x = 0;";
        script = script + "				skill.Comments.forEach(function(comment){";
        script = script + "				";
        script = script + "				   var viewIt = {";
        script = script + "						Comments: comment.Comments,";
        script = script + "						Date: comment.Date,";
        script = script + "						StatusView: comment.StatusView,";
        script = script + "						UserComment: comment.UserComment";
        script = script + "				   };";
        script = script + "				   view.Comments[x] = viewIt;";
        script = script + "				});";
        script = script + "			}";
        script = script + "			if(skill.Plans != null){";
        script = script + "				var x = 0;";
        script = script + "				skill.Plans.forEach(function(plan){";
        script = script + "				";
        script = script + "				   var viewPlan = {";
        script = script + "						_id: plan._id,";
        script = script + "						Name: plan.Name,";
        script = script + "						Description: plan.Description,";
        script = script + "						Deadline: plan.Deadline,";
        script = script + "						Skills: [],";
        script = script + "						TypePlan: plan.TypePlan,";
        script = script + "						SourcePlan: plan.SourcePlan,";
        script = script + "						StatusPlan: plan.StatusPlan,";
        script = script + "						StatusPlanApproved: plan.StatusPlanApproved,";
        script = script + "						TypeAction: plan.TypeAction,";
        script = script + "						Attachments: plan.Attachments,";
        script = script + "						NewAction: plan.NewAction,";
        script = script + "						TextEnd: plan.TextEnd,";
        script = script + "						TextEndManager: plan.TextEndManager,";
        script = script + "						Evaluation: plan.Evaluation";
        script = script + "				   };";
        script = script + "				   if(plan.Skills != null){";
        script = script + "					   var z = 0;";
        script = script + "					   plan.Skills.forEach(function(planSkill){";
        script = script + "						   var viewPlanSkill = {";
        script = script + "							  _id: planSkill._id,";
        script = script + "							  Name: planSkill.Name,";
        script = script + "							  Concept: planSkill.Concept,";
        script = script + "							  TypeSkill: planSkill.TypeSkill";
        script = script + "						   };";
        script = script + "						   viewPlan.Skills[z] = viewPlanSkill;";
        script = script + "					   });";
        script = script + "				   }";
        script = script + "				   view.Plans[x] = viewPlan;";
        script = script + "				});";
        script = script + "			}";
        script = script + "			";
        script = script + "			";
        script = script + "			model.Schoolings[i] = view;";
        script = script + "			i += 1;";
        script = script + "		   }";
        script = script + "		});";
        script = script + "	}";
        script = script + "	";
        script = script + "	if(item.Activities != null){";
        script = script + "		var i = 0;";
        script = script + "		item.Activities.forEach(function(skill){";
        script = script + "		   if(skill!= null){";
        script = script + "			   var view = {";
        script = script + "				_id: skill._id,";
        script = script + "				CommentsManager: skill.CommentsManager,";
        script = script + "				CommentsPerson: skill.CommentsPerson,";
        script = script + "				Comments: [],";
        script = script + "				Plans: [],";
        script = script + "				StatusViewManager: skill.StatusViewManager,";
        script = script + "				StatusViewPerson: skill.StatusViewPerson,";
        script = script + "				Praise: skill.Praise,";
        script = script + "				Activities: {";
        script = script + "				  _id: skill.Activities._id,";
        script = script + "				  Name: skill.Activities.Name,";
        script = script + "				  Order: skill.Activities.Order";
        script = script + "				}";
        script = script + "			};";
        script = script + "			if(skill.Comments != null){";
        script = script + "				var x = 0;";
        script = script + "				skill.Comments.forEach(function(comment){";
        script = script + "				";
        script = script + "				   var viewIt = {";
        script = script + "						Comments: comment.Comments,";
        script = script + "						Date: comment.Date,";
        script = script + "						StatusView: comment.StatusView,";
        script = script + "						UserComment: comment.UserComment";
        script = script + "				   };";
        script = script + "				   view.Comments[x] = viewIt;";
        script = script + "				});";
        script = script + "			}";
        script = script + "			if(skill.Plans != null){";
        script = script + "				var x = 0;";
        script = script + "				skill.Plans.forEach(function(plan){";
        script = script + "				";
        script = script + "				   var viewPlan = {";
        script = script + "						_id: plan._id,";
        script = script + "						Name: plan.Name,";
        script = script + "						Description: plan.Description,";
        script = script + "						Deadline: plan.Deadline,";
        script = script + "						Skills: [],";
        script = script + "						TypePlan: plan.TypePlan,";
        script = script + "						SourcePlan: plan.SourcePlan,";
        script = script + "						StatusPlan: plan.StatusPlan,";
        script = script + "						StatusPlanApproved: plan.StatusPlanApproved,";
        script = script + "						TypeAction: plan.TypeAction,";
        script = script + "						Attachments: plan.Attachments,";
        script = script + "						NewAction: plan.NewAction,";
        script = script + "						TextEnd: plan.TextEnd,";
        script = script + "						TextEndManager: plan.TextEndManager,";
        script = script + "						Evaluation: plan.Evaluation";
        script = script + "				   };";
        script = script + "				   if(plan.Skills != null){";
        script = script + "					   var z = 0;";
        script = script + "					   plan.Skills.forEach(function(planSkill){";
        script = script + "						   var viewPlanSkill = {";
        script = script + "							  _id: planSkill._id,";
        script = script + "							  Name: planSkill.Name,";
        script = script + "							  Concept: planSkill.Concept,";
        script = script + "							  TypeSkill: planSkill.TypeSkill";
        script = script + "						   };";
        script = script + "						   viewPlan.Skills[z] = viewPlanSkill;";
        script = script + "					   });";
        script = script + "				   }";
        script = script + "				   view.Plans[x] = viewPlan;";
        script = script + "				});";
        script = script + "			}";
        script = script + "			";
        script = script + "			";
        script = script + "			model.Activities[i] = view;";
        script = script + "			i += 1;";
        script = script + "		   }";
        script = script + "		});";
        script = script + "	}";
        script = script + "	";
        script = script + "   db.MonitoringNew.insert(model);";
        script = script + "});";

        script = script + "db.Monitoring.renameCollection('old_Monitoring');";
        script = script + "db.MonitoringNew.renameCollection('Monitoring');";


        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);


        script = "db.Monitoring.find({ }).forEach((moni)=> {";
        script = script + "	var person = {";
        script = script + "		_id: moni.Person._id,";
        script = script + "		Name: moni.Person.Name,";
        script = script + "		_idManager: moni.Person._idManager,";
        script = script + "		NameManager: moni.Person.Manager";
        script = script + "	};";
        script = script + "	";
        script = script + "	moni.Activities.forEach((item) => {";
        script = script + "		item.Plans.forEach((it)=> {";
        script = script + "		  db.Plan.update({_id: it._id},";
        script = script + "			  {$set:{ _idMonitoring: moni._id, _idItem: item._id, Person: person}},";
        script = script + "			  { multi: true}";
        script = script + "		  )";
        script = script + "		});";
        script = script + "	});";
        script = script + "});";


        doc = new BsonDocument() { { "eval", script } };
        command = new BsonDocumentCommand<BsonDocument>(doc);
        response = context.RunCommand(command);
        
      }
      catch (Exception e)
      {
        throw e;
      }
    }

    public void Down(string _idPrevMigration, IMongoDatabase context)
    {
      throw new NotImplementedException();
    }

  }
}
